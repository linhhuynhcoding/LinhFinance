// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: purpose.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPurpose = `-- name: CreatePurpose :one
INSERT INTO purpose (name, description)
VALUES ($1, $2)
RETURNING id, name, description
`

type CreatePurposeParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreatePurpose(ctx context.Context, arg CreatePurposeParams) (Purpose, error) {
	row := q.db.QueryRow(ctx, createPurpose, arg.Name, arg.Description)
	var i Purpose
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deletePurpose = `-- name: DeletePurpose :exec
DELETE FROM purpose WHERE id = $1
`

func (q *Queries) DeletePurpose(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePurpose, id)
	return err
}

const getPurpose = `-- name: GetPurpose :one
SELECT id, name, description FROM purpose WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPurpose(ctx context.Context, id int64) (Purpose, error) {
	row := q.db.QueryRow(ctx, getPurpose, id)
	var i Purpose
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listPurposes = `-- name: ListPurposes :many
SELECT id, name, description FROM purpose ORDER BY id
`

func (q *Queries) ListPurposes(ctx context.Context) ([]Purpose, error) {
	rows, err := q.db.Query(ctx, listPurposes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Purpose{}
	for rows.Next() {
		var i Purpose
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePurpose = `-- name: UpdatePurpose :one
UPDATE purpose
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description
`

type UpdatePurposeParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdatePurpose(ctx context.Context, arg UpdatePurposeParams) (Purpose, error) {
	row := q.db.QueryRow(ctx, updatePurpose, arg.ID, arg.Name, arg.Description)
	var i Purpose
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
